---
interface Props {
  tags: string[];
}

const { tags } = Astro.props;

console.log('SanityLive', {tags})
---
<sanity-live tags={tags} />

<script>
  import {CorsOriginError} from '@sanity/client'
  import {navigate} from 'astro:transitions/client'
  import {client} from '../sanity/client'

  

  // console.log('SanityLive initial', {tags})

  const subscription = client.live.events().subscribe({
    next: (event) => {
      // console.log('SanityLive event', {tags, event})
      if (event.type === 'welcome') {
        console.info('Sanity is live with automatic revalidation of published content')
      } else if (event.type === 'message') {
        const url = new URL(window.location.href)
        url.searchParams.set('lastLiveEventId', event.id)
        navigate(url.toString(), {history: 'replace'})
      } else if (event.type === 'restart' || event.type === 'reconnect') {
        const url = new URL(window.location.href)
        url.searchParams.delete('lastLiveEventId')
        navigate(url.toString(), {history: 'replace'})
      }
    },
    error: (error: unknown) => {
      if (error instanceof CorsOriginError) {
        console.warn(
          `Sanity Live is unable to connect to the Sanity API as the current origin - ${window.origin} - is not in the list of allowed CORS origins for this Sanity Project.`,
          error.addOriginUrl && `Add it here:`,
          error.addOriginUrl?.toString(),
        )
      } else {
        console.error(error)
      }
    },
  })
  window.addEventListener('beforeunload', () => subscription.unsubscribe())

  class SanityLive extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const message = this.dataset.message;
      const button = this.querySelector('button');
      button.addEventListener('click', () => {
        alert(message);
      });
    }
  }

  customElements.define('sanity-live', SanityLive);
</script>
